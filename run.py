#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ch·∫°y server FastAPI
S·ª≠ d·ª•ng: python run.py [options]
"""
import os
import sys
import argparse
import uvicorn
from pathlib import Path

# Fix encoding cho Windows terminal
if sys.platform == "win32":
    import locale
    if sys.stdout.encoding != 'utf-8':
        sys.stdout.reconfigure(encoding='utf-8')
    if sys.stderr.encoding != 'utf-8':
        sys.stderr.reconfigure(encoding='utf-8')


def check_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng tr∆∞·ªõc khi ch·∫°y"""
    print("=" * 60)
    print("DANGEROUS OBJECTS AI API")
    print("=" * 60)
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("[ERROR] Python 3.8+ required!")
        sys.exit(1)
    print(f"[OK] Python version: {sys.version.split()[0]}")
    
    # Check .env file
    env_file = Path(".env")
    if not env_file.exists():
        print("[WARNING] File .env kh√¥ng t·ªìn t·∫°i!")
        print("   Copy .env.example sang .env v√† ƒëi·ªÅn th√¥ng tin:")
        print("   cp .env.example .env")
        
        # H·ªèi user c√≥ mu·ªën t·∫°o .env m·∫´u kh√¥ng
        response = input("\n[?] T·∫°o file .env m·∫´u? (y/n): ").lower()
        if response == 'y':
            if Path(".env.example").exists():
                import shutil
                shutil.copy(".env.example", ".env")
                print("[OK] ƒê√£ t·∫°o file .env t·ª´ .env.example")
                print("[WARNING] H√£y s·ª≠a c√°c gi√° tr·ªã trong .env tr∆∞·ªõc khi ch·∫°y!")
                sys.exit(0)
            else:
                print("[ERROR] Kh√¥ng t√¨m th·∫•y .env.example")
                sys.exit(1)
    else:
        print("[OK] File .env t·ªìn t·∫°i")
    
    # Check model file
    model_file = Path("mobilenetv2_dangerous_objects.pth")
    if not model_file.exists():
        print(f"[ERROR] Model file kh√¥ng t√¨m th·∫•y: {model_file}")
        print("   ƒê·∫∑t file model weights v√†o th∆∞ m·ª•c g·ªëc!")
        sys.exit(1)
    else:
        size_mb = model_file.stat().st_size / (1024 * 1024)
        print(f"[OK] Model file: {model_file} ({size_mb:.1f} MB)")
    
    # Check database
    db_file = Path("app.db")
    if db_file.exists():
        print(f"[OK] Database: {db_file}")
    else:
        print("[INFO]  Database s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông l·∫ßn ƒë·∫ßu ch·∫°y")
    
    print("=" * 60)
    print()


def init_database():
    """Kh·ªüi t·∫°o database n·∫øu ch∆∞a c√≥"""
    from app.database import init_db
    print("[SETUP] Kh·ªüi t·∫°o database...")
    try:
        init_db()
        print("[OK] Database ƒë√£ s·∫µn s√†ng")
    except Exception as e:
        print(f"[ERROR] L·ªói kh·ªüi t·∫°o database: {e}")
        sys.exit(1)


def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="Ch·∫°y Dangerous Objects AI API Server",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª•:
  python run.py                    # Ch·∫°y v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
  python run.py --port 3000        # Ch·∫°y tr√™n port 3000
  python run.py --reload           # Ch·∫°y v·ªõi auto-reload (dev mode)
  python run.py --host 0.0.0.0     # Cho ph√©p truy c·∫≠p t·ª´ b√™n ngo√†i
  python run.py --workers 4        # Ch·∫°y v·ªõi 4 workers (production)
        """
    )
    
    parser.add_argument(
        "--host",
        type=str,
        default="127.0.0.1",
        help="Host ƒë·ªÉ bind server (m·∫∑c ƒë·ªãnh: 127.0.0.1)"
    )
    
    parser.add_argument(
        "--port",
        type=int,
        default=8000,
        help="Port ƒë·ªÉ ch·∫°y server (m·∫∑c ƒë·ªãnh: 8000)"
    )
    
    parser.add_argument(
        "--reload",
        action="store_true",
        help="B·∫≠t auto-reload khi code thay ƒë·ªïi (dev mode)"
    )
    
    parser.add_argument(
        "--workers",
        type=int,
        default=1,
        help="S·ªë l∆∞·ª£ng worker processes (production mode)"
    )
    
    parser.add_argument(
        "--log-level",
        type=str,
        default="info",
        choices=["critical", "error", "warning", "info", "debug"],
        help="Log level (m·∫∑c ƒë·ªãnh: info)"
    )
    
    parser.add_argument(
        "--skip-checks",
        action="store_true",
        help="B·ªè qua ki·ªÉm tra m√¥i tr∆∞·ªùng"
    )
    
    parser.add_argument(
        "--init-db",
        action="store_true",
        help="Ch·ªâ kh·ªüi t·∫°o database r·ªìi tho√°t"
    )
    
    args = parser.parse_args()
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not args.skip_checks:
        check_environment()
    
    # Kh·ªüi t·∫°o database n·∫øu c·∫ßn
    if args.init_db:
        init_database()
        print("\n[OK] Xong! Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.")
        return
    
    # C·∫•u h√¨nh uvicorn
    config = {
        "app": "app.main:app",
        "host": args.host,
        "port": args.port,
        "log_level": args.log_level,
    }
    
    # Dev mode (single worker v·ªõi reload)
    if args.reload:
        print("[SETUP] Ch·∫°y ·ªü ch·∫ø ƒë·ªô DEVELOPMENT (auto-reload)")
        print(f"[SERVER] Server: http://{args.host}:{args.port}")
        print(f"[DOCS] Docs: http://{args.host}:{args.port}/docs")
        print("\n[TIP] Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server\n")
        config["reload"] = True
        config["reload_dirs"] = ["app"]
    
    # Production mode (multiple workers, no reload)
    elif args.workers > 1:
        print(f"[START] Ch·∫°y ·ªü ch·∫ø ƒë·ªô PRODUCTION ({args.workers} workers)")
        print(f"[SERVER] Server: http://{args.host}:{args.port}")
        print(f"[DOCS] Docs: http://{args.host}:{args.port}/docs")
        print("\n[TIP] Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server\n")
        config["workers"] = args.workers
    
    # Single worker mode
    else:
        print("[START] Ch·∫°y server...")
        print(f"[SERVER] Server: http://{args.host}:{args.port}")
        print(f"[DOCS] Docs: http://{args.host}:{args.port}/docs")
        print("\n[TIP] Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server\n")
    
    # Ch·∫°y server
    try:
        uvicorn.run(**config)
    except KeyboardInterrupt:
        print("\n\nüëã Server ƒë√£ d·ª´ng. T·∫°m bi·ªát!")
    except Exception as e:
        print(f"\n[ERROR] L·ªói khi ch·∫°y server: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()


